"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[8637],{49775:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=t(85893),i=t(11151);const a={title:"GitHub Actions / SARIF",sidebar_position:9,sidebar_custom_props:{icon:"icon-github.svg"}},o="GitHub Actions / SARIF",r={id:"ecosystem/analysis/sarif",title:"GitHub Actions / SARIF",description:"This is still an alpha feature.",source:"@site/content/docs/ecosystem/analysis/sarif.md",sourceDirName:"ecosystem/analysis",slug:"/ecosystem/analysis/sarif",permalink:"/ecosystem/analysis/sarif",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/ecosystem/analysis/sarif.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"GitHub Actions / SARIF",sidebar_position:9,sidebar_custom_props:{icon:"icon-github.svg"}},sidebar:"ecosystemSidebar",previous:{title:"Java support",permalink:"/ecosystem/analysis/java"}},c={},l=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"github-actions--sarif",children:(0,s.jsx)("decorated-text",{icon:a.sidebar_custom_props.icon,children:"GitHub Actions / SARIF"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"This is still an alpha feature."})}),"\n",(0,s.jsxs)(n.p,{children:["Arrow Analysis generates a so-called SARIF report as part of its output. ",(0,s.jsx)(n.a,{href:"https://sarifweb.azurewebsites.net/",children:"SARIF"})," is a standard interchange format for static analysis, which can be later consumed by many different tools. When using the Gradle plug-in, the file can be found in the ",(0,s.jsx)(n.code,{children:"build/generated"})," folder."]}),"\n",(0,s.jsxs)(n.p,{children:["One very useful integration is with ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/about-integration-with-code-scanning",children:"GitHub's Code Scanning"}),". In that case the results of the analysis appear as part of the workflow output, annotating the source code itself. You can see ",(0,s.jsx)(n.a,{href:"https://github.com/arrow-kt/backend-arrow-example/pull/6/checks?check_run_id=4497725364",children:"an example"}),' for an "unsatisfiable pre-condition" error.']}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsxs)(n.p,{children:["Unfortunately, you need to pay for Code Scanning in private repos. For public ones you can enable it in the ",(0,s.jsx)(n.em,{children:"Security & analysis"})," tab in the repo settings."]})]}),"\n",(0,s.jsxs)(n.p,{children:["The following snippet shows how to configure your GitHub Action workflow to make it aware of Code Scanning. We assume that you've ",(0,s.jsx)(n.a,{href:"../quickstart",children:"configured your Gradle project to run Arrow Analysis"})," as part of the ",(0,s.jsx)(n.code,{children:"build"}),' task. The next step is to take all the SARIF files and put them in a single folder, what we call "bundle analysis report" here. Finally you use the ',(0,s.jsxs)(n.a,{href:"https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github",children:[(0,s.jsx)(n.code,{children:"upload-sarif"})," action"]}),", passing the name of the folder where you've gathered the SARIF files. We use ",(0,s.jsx)(n.code,{children:"if: always()"})," because otherwise the results would only be uploaded on a succesful run, which is the least interesting scenario for an analysis tool."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"jobs:\n  \n  build_artifacts:\n    \n    steps:\n      - first_steps\n      \n      - name: Build and test with Gradle\n        run: ./gradlew build\n\n      - more_steps\n\n      - name: Bundle analysis report\n        if: always()\n        run: mkdir sarif && find . -name '*.sarif' | xargs -I{} cp \"{}\" ./sarif/\n\n      - name: Upload analysis report\n        if: always()\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          sarif_file: sarif # path relative to root\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var s=t(67294);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);