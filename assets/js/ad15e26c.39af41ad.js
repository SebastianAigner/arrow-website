"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[5770],{15855:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=o(85893),n=o(11151);const i={title:"Nicer data transformation with KopyKat and Optics",image:"https://img.youtube.com/vi/atV8liVgd3w/maxresdefault.jpg",category:"videos",tags:["optics","videos"],link:"https://youtu.be/atV8liVgd3w",event:"KotlinConf"},r="Nicer Data Transformation With KopyKat and Optics",s={permalink:"/community/blog/2023/05/04/data-transformation-kotlinconf",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-05-04-data-transformation-kotlinconf.md",source:"@site/content/blog/2023-05-04-data-transformation-kotlinconf.md",title:"Nicer data transformation with KopyKat and Optics",description:"Watch Alejandro Serrano's presentation from KotlinConf 2023 about data transformation.",date:"2023-05-04T00:00:00.000Z",formattedDate:"May 4, 2023",tags:[{label:"optics",permalink:"/community/blog/tags/optics"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.365,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Nicer data transformation with KopyKat and Optics",image:"https://img.youtube.com/vi/atV8liVgd3w/maxresdefault.jpg",category:"videos",tags:["optics","videos"],link:"https://youtu.be/atV8liVgd3w",event:"KotlinConf"},unlisted:!1,prevItem:{title:"Arrow 2.0's Trajectory - Video",permalink:"/community/blog/2023/05/04/arrow-trajectory-kotlinconf"},nextItem:{title:"Typed Error Handling in Kotlin",permalink:"/community/blog/2023/04/17/typed-error-handling-in-kotlin"}},l={authorsImageUrls:[]},c=[];function m(t){const e={a:"a",p:"p",...(0,n.a)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:["Watch ",(0,a.jsx)(e.a,{href:"https://twitter.com/trupill",children:"Alejandro Serrano"}),"'s presentation from KotlinConf 2023 about data transformation."]}),"\n",(0,a.jsx)(e.p,{children:"Data classes are incredibly useful when modeling our domain in an immutable way. The Kotlin compiler gives us many niceties, including 'copy' to create a new value based on a previous one. However, this 'copy' often falls short. This talk explores two alternatives: KopyKat, a plug-in to generate additional variations of 'copy', and Arrow Optics, a whole framework to transform this immutable data."})]})}function d(t={}){const{wrapper:e}={...(0,n.a)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(m,{...t})}):m(t)}},11151:(t,e,o)=>{o.d(e,{Z:()=>s,a:()=>r});var a=o(67294);const n={},i=a.createContext(n);function r(t){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:r(t.components),a.createElement(i.Provider,{value:e},t.children)}}}]);