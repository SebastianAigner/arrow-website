"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[7805],{70226:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>a});var t=n(85893),l=n(11151);const r={sidebar_position:2,description:"Better aggregation over sequences"},c="Collectors",s={id:"learn/collections-functions/collectors",title:"Collectors",description:"Better aggregation over sequences",source:"@site/content/docs/learn/collections-functions/collectors.md",sourceDirName:"learn/collections-functions",slug:"/learn/collections-functions/collectors",permalink:"/learn/collections-functions/collectors",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/collections-functions/collectors.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Better aggregation over sequences"},sidebar:"learnSidebar",previous:{title:"Non-empty collections",permalink:"/learn/collections-functions/non-empty"},next:{title:"Recursive functions",permalink:"/learn/collections-functions/recursive"}},i={},a=[];function d(e){const o={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"collectors",children:"Collectors"}),"\n",(0,t.jsx)(o.p,{children:"Collectors help build complex computations over sequences of values,\nguaranteeing that those values are consumed only once."}),"\n",(0,t.jsx)(o.p,{children:"Take for example the computation of the average of a list. You can\ncertainly write a simple version using the built-in functions,"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:"val average = list.sum() / list.size\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Note however that this implementation traverses the list ",(0,t.jsx)(o.em,{children:"twice"}),",\none per operation over the list. This may not be a problem for small\nlists but could become more problematic with longer collections.\nSome data structures, like ",(0,t.jsx)(o.code,{children:"Sequence"})," or ",(0,t.jsx)(o.code,{children:"Flow"}),", impose an\neven larger footprint, as their elements are computed every time\nyou need a new one."]}),"\n",(0,t.jsxs)(o.p,{children:["Collectors separate the description of the aggregation you want\nto perform from the actual collection. To create a new collector\nyou use one of the built-in ones, and combine them using ",(0,t.jsx)(o.code,{children:"zip"}),"."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:"import arrow.collectors.Collectors\nimport arrow.collectors.collect\nimport arrow.collectors.zip\n\nfun divide(x: Int, y: Int): Double = x.toDouble() / y.toDouble()\n\nval averageCollector = zip(Collectors.sum, Collectors.length, ::divide)\n"})}),"\n",(0,t.jsx)(o.p,{children:"You then may apply the collector to the sequence or collection you want."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:"val average = list.collect(averageCollector)\n"})}),"\n",(0,t.jsx)(o.admonition,{title:"Influences",type:"note",children:(0,t.jsxs)(o.p,{children:["The API implemented in ",(0,t.jsx)(o.code,{children:"arrow-collectors"})," is heavily influenced by\nJava's ",(0,t.jsx)(o.a,{href:"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html",children:(0,t.jsx)(o.code,{children:"Collector"})}),"\nand Haskell's ",(0,t.jsxs)(o.a,{href:"https://hackage.haskell.org/package/foldl/docs/Control-Foldl.html",children:[(0,t.jsx)(o.code,{children:"foldl"})," library"]}),"."]})})]})}function u(e={}){const{wrapper:o}={...(0,l.a)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,o,n)=>{n.d(o,{Z:()=>s,a:()=>c});var t=n(67294);const l={},r=t.createContext(l);function c(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);